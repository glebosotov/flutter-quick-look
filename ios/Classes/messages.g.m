// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *QLQuickLookApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpQLQuickLookApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<QLQuickLookApi> *api) {
  /// Opens file saved at [url] in iOS QuickLook
  ///
  /// The file should be saved at the ApplicationDocumentsDirectory (check out the example at https://pub.dev/packages/quick_look/example)
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.quick_look.QuickLookApi.openURL"
        binaryMessenger:binaryMessenger
        codec:QLQuickLookApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openURLUrl:completion:)], @"QLQuickLookApi api (%@) doesn't respond to @selector(openURLUrl:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_url = GetNullableObjectAtIndex(args, 0);
        [api openURLUrl:arg_url completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Opens files saved at [resourceURLs] in iOS QuickLook (user can swipe between them)
  ///
  /// Sets the current item in view to [initialIndex]
  ///
  /// The files should be saved at the ApplicationDocumentsDirectory (check out the example at https://pub.dev/packages/quick_look/example)
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.quick_look.QuickLookApi.openURLs"
        binaryMessenger:binaryMessenger
        codec:QLQuickLookApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openURLsResourceURLs:initialIndex:completion:)], @"QLQuickLookApi api (%@) doesn't respond to @selector(openURLsResourceURLs:initialIndex:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_resourceURLs = GetNullableObjectAtIndex(args, 0);
        NSInteger arg_initialIndex = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api openURLsResourceURLs:arg_resourceURLs initialIndex:arg_initialIndex completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns whether iOS QuickLook supports the saved at [url] file type (and can preview it) or not
  ///
  /// The list of supported file types varies depending on iOS version
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.quick_look.QuickLookApi.canOpenURL"
        binaryMessenger:binaryMessenger
        codec:QLQuickLookApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(canOpenURLUrl:completion:)], @"QLQuickLookApi api (%@) doesn't respond to @selector(canOpenURLUrl:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_url = GetNullableObjectAtIndex(args, 0);
        [api canOpenURLUrl:arg_url completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
